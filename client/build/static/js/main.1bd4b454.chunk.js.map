{"version":3,"sources":["assets/nyan-small.gif","shared.js","getWeb3.js","Staking.js","Pump.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","web3","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","console","log","Web3","enable","provider","providers","HttpProvider","Staking","state","loaded","stakeAmount","stakedAmount","isApproved","isApproving","isStaking","isWithdrawing","catnipRewards","totalNyanSupply","allowance","handleClick","props","toggle","getAllowance","nyanInstance","methods","accounts","catnipInstance","_address","call","_nyanAllowance","setState","utils","fromWei","toString","stakeNyan","stake","toWei","send","from","getMyStakeAmount","withdrawNyan","withdraw","getNyanSupply","totalSupply","_nyanSupply","approveNyan","approve","gas","getAddressStakeAmount","stakeA","getCatnipRewards","myRewardsBalance","cRewards","claimRewards","getReward","componentDidMount","eth","getAccounts","net","getId","networkId","Contract","NyanToken","abi","CatnipToken","alert","error","e","this","target","value","className","onClick","placeholder","onChange","updateStakingInput","bind","type","disabled","Component","Pump","App","isViewingStaking","isViewingPump","nyanBalance","totalNyanStaked","totalCatnipSupply","getNyanBalance","balanceOf","_nyanBalance","totalStakedSupply","_totalNyanStaked","getCatnipSupply","_catnipSupply","setNyanAddress","toggleStakingView","togglePumpView","_getWeb3","document","title","_web3","styles","backgroundImage","nyanGif","href","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bd4b454.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nyan-small.38ec77e4.gif\";","let web3;\r\n\r\nexport function setWeb3(_web3) {\r\n    web3 = _web3\r\n}\r\n\r\nexport function getWeb3Var() {\r\n    return web3;\r\n}","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        console.log(window.ethereum);\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\r\nimport NyanToken from \"./contracts/NyanToken.json\";\r\nimport CatnipToken from \"./contracts/CatnipToken.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport {setWeb3, getWeb3Var} from \"./shared\";\r\nimport App from \"./App\";\r\n\r\nexport default class Staking extends Component {\r\n\r\nstate = {\r\n    loaded: false,\r\n    stakeAmount: 0,\r\n    stakedAmount: 0,\r\n    isApproved: false,\r\n    isApproving: false,\r\n    isStaking: false,\r\n    isWithdrawing: false,\r\n    catnipRewards: 0,\r\n    totalNyanSupply: 0,\r\n    allowance: 0\r\n    };\r\n  \r\n  handleClick = () => {\r\n    this.props.toggle();\r\n  };\r\n\r\n  updateStakingInput(e) {\r\n    this.setState({stakeAmount: e.target.value})\r\n    if (this.state.stakeAmount > this.state.allowance) {\r\n        this.setState({isApproved: false})\r\n    }\r\n }\r\n\r\n getAllowance = async () => {\r\n    let _nyanAllowance = await this.nyanInstance.methods.allowance(this.accounts[0], this.catnipInstance._address).call();\r\n    if (_nyanAllowance > 0) {\r\n        this.setState({isApproved: true, allowance: this.web3.utils.fromWei(_nyanAllowance.toString())})\r\n    }\r\n  }\r\n\r\n  stakeNyan = async () => {\r\n    if (this.state.isStaking) {\r\n        return;\r\n    }                        \r\n    this.setState({isStaking: true});\r\n    try {\r\n        let stakeRes = await this.catnipInstance.methods.stake(this.web3.utils.toWei(this.state.stakeAmount.toString())).send({\r\n            from: this.accounts[0]\r\n        });\r\n        if (stakeRes[\"status\"]) {\r\n            this.setState({isStaking: false, isApproved: false, stakeAmount: 0});\r\n            this.getMyStakeAmount();\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n  }\r\n\r\n  withdrawNyan = async () => {\r\n    if (this.state.isWithdrawing) {\r\n        return;\r\n    }\r\n    this.setState({isWithdrawing: true});\r\n    try {\r\n        let unstakeRes = await this.catnipInstance.methods.withdraw(this.web3.utils.toWei(this.state.stakeAmount.toString())).send({\r\n            from: this.accounts[0]\r\n        });\r\n    \r\n        if (unstakeRes[\"status\"]) {\r\n            this.setState({isWithdrawing: false, stakeAmount: 0});\r\n            this.getMyStakeAmount();\r\n        } else {\r\n            this.setState({isWithdrawing: false});\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n  }\r\n\r\n  getNyanSupply = async () => {\r\n    let _nyanSupply = await this.nyanInstance.methods.totalSupply().call();\r\n    this.setState({\r\n      totalNyanSupply: this.web3.utils.fromWei(_nyanSupply)\r\n    })\r\n  }\r\n\r\n  approveNyan = async () => {\r\n    if (this.state.isApproving) {\r\n        return;\r\n    }  \r\n    this.setState({isApproving: true});\r\n    \r\n    let approveStaking = await this.nyanInstance.methods.approve(this.catnipInstance._address, this.web3.utils.toWei(this.state.totalNyanSupply.toString())).send({\r\n        from: this.accounts[0],\r\n        gas: 1000000\r\n    });\r\n    \r\n    if (approveStaking[\"status\"]) {\r\n        this.setState({isApproving: false, isApproved: true});\r\n        \r\n    }\r\n  }\r\n\r\n  getMyStakeAmount = async () => {\r\n    let stakeA = await this.catnipInstance.methods.getAddressStakeAmount(this.accounts[0]).call();\r\n    \r\n    this.setState({stakedAmount: this.web3.utils.fromWei(stakeA)});\r\n  }\r\n\r\n  getCatnipRewards = async () => {\r\n    \r\n    let cRewards = await this.catnipInstance.methods.myRewardsBalance(this.accounts[0]).call();\r\n\r\n    this.setState({catnipRewards: this.web3.utils.fromWei(cRewards)});\r\n  }\r\n\r\n  claimRewards = async () => {\r\n    let claim = await this.catnipInstance.methods.getReward().send({\r\n        from: this.accounts[0],\r\n        gas: 1000000\r\n    });\r\n    \r\n    this.getCatnipRewards();\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n\r\n    try {\r\n      this.web3 = getWeb3Var();\r\n        \r\n      // Get network provider and web3 instance.\r\n     \r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n    \r\n      // Get the contract instance.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n\r\n      this.nyanInstance = new this.web3.eth.Contract(\r\n        NyanToken.abi,\r\n        \"0xc9ce70a381910d0a90b30d408cc9c7705ee882de\"\r\n      );\r\n\r\n      this.catnipInstance = new this.web3.eth.Contract(\r\n        CatnipToken.abi,\r\n        \"0xd2b93f66fd68c5572bfb8ebf45e2bd7968b38113\",\r\n      );\r\n\r\n      this.getAllowance();\r\n      this.getNyanSupply()\r\n      this.getMyStakeAmount();\r\n      this.getCatnipRewards();\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({loaded: true});\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"modal\">\r\n        <div className=\"modal_content\">\r\n          <span className=\"close\" onClick={this.handleClick}>\r\n            &times;\r\n          </span>\r\n          <h1>STAKE NYAN</h1>\r\n          <h4 className=\"s-amount\">Amount staked: {this.state.stakedAmount}</h4>\r\n            <div>\r\n                <input \r\n                className=\"input\" \r\n                placeholder=\"0\"\r\n                value={this.state.stakeAmount} \r\n                onChange={this.updateStakingInput.bind(this)}\r\n                type=\"number\">\r\n\r\n                </input>\r\n            </div>\r\n            <br />\r\n            {!this.state.isApproved ? <div className=\"stake-button\" onClick={this.approveNyan}>\r\n                {!this.state.isApproving ? <div>STEP 1: APPROVE</div> : null}\r\n                {this.state.isApproving ? <div>APPROVING...</div> : null}\r\n            </div> : null}\r\n            {this.state.isApproved ? <div className=\"stake-button\" onClick={this.stakeNyan}>\r\n                {!this.state.isStaking ? <div>STEP 2: STAKE</div> : null}\r\n                {this.state.isStaking ? <div>STAKING...</div> : null}\r\n            </div> : null}\r\n            <div className=\"stake-button\" onClick={this.withdrawNyan}>\r\n                {!this.state.isWithdrawing ? <div>WITHDRAW</div> : null}\r\n                {this.state.isWithdrawing ? <div>WITHDRAWING...</div> : null}\r\n            </div>\r\n\r\n            <h1>GET CATNIP</h1>\r\n            <div className=\"updateC\" onClick={this.getCatnipRewards}>UPDATE</div>\r\n            <p>INFO: Catnip rewards grow per block and are updated on each transaction(send) to functions \r\n                with the \"updateStakingRewards\" modifier.</p>\r\n            <div>\r\n                <input className=\"input\" disabled \r\n                value={this.state.catnipRewards}\r\n                placeholder=\"0\" type=\"number\"></input>\r\n            </div>\r\n            <br />\r\n            <div className=\"stake-button\" onClick={this.claimRewards}>CLAIM</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Pump extends Component {\r\n  handleClick = () => {\r\n    this.props.toggle();\r\n  };\r\n\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"modal\">\r\n        <div className=\"modal_content\">\r\n          <span className=\"close\" onClick={this.handleClick}>\r\n            &times;\r\n          </span>\r\n          <h1>PUMP FUND</h1>\r\n            <h3>Let's build a whale!</h3>\r\n\r\n            <div>\r\n                <p>NYAN is introducing a publically governed Uniswap Hedge fund.</p>\r\n            </div>\r\n            \r\n            <div>\r\n                <p>20% of all minted Catnip goes to a funding contract every few days.</p>\r\n            </div>\r\n          \r\n            <div>\r\n                <p>NYAN holders will be able to vote on which Uniswap token the contract will swap for. </p>\r\n            </div>\r\n\r\n            <div>\r\n              <p>The contract will hold the token for a specified amount of blocks or until NYAN holders\r\n                    vote for a swap back to Catnip</p>\r\n            </div>\r\n            \r\n            <div>\r\n                <p>During a swap back to Catnip, the resulting Catnip will\r\n                    be proportionately distributed to NYAN holders.</p>\r\n            </div>\r\n\r\n            <div className=\"vote-nyan\"></div>\r\n\r\n            <div className=\"launch-date\">Voting starts late September</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Staking from \"./Staking\";\nimport Pump from \"./Pump\";\nimport NyanToken from \"./contracts/NyanToken.json\";\nimport CatnipToken from \"./contracts/CatnipToken.json\";\nimport getWeb3 from \"./getWeb3\";\nimport {setWeb3, getWeb3Var} from \"./shared\";\n\nimport \"./App.css\";\n\nimport nyanGif from './assets/nyan-small.gif';\n\nclass App extends Component {\n  state = {\n    isViewingStaking : false,\n    isViewingPump: false,\n    nyanBalance: 0,\n    totalNyanSupply: 0,\n    totalNyanStaked: 0,\n    totalCatnipSupply: 0\n   };\n\n   \n\n   getNyanBalance = async () => {\n     let _nyanBalance = await this.nyanInstance.methods.balanceOf(this.accounts[0]).call();\n     this.setState({\n       nyanBalance: this.web3.utils.fromWei(_nyanBalance)\n     })\n   }\n\n   getNyanSupply = async () => {\n    let _nyanSupply = await this.nyanInstance.methods.totalSupply().call();\n    this.setState({\n      totalNyanSupply: this.web3.utils.fromWei(_nyanSupply)\n    })\n  }\n\n  totalNyanStaked = async () => {\n   let _totalNyanStaked = await this.catnipInstance.methods.totalStakedSupply().call();\n\n   this.setState({\n     totalNyanStaked: this.web3.utils.fromWei(_totalNyanStaked)\n   })\n }\n\n getCatnipSupply = async () => {\n  let _catnipSupply = await this.catnipInstance.methods.totalSupply().call();\n\n  this.setState({\n    totalCatnipSupply: this.web3.utils.fromWei(_catnipSupply)\n  })\n}\n\n   setNyanAddress = async () => {\n     let addressSet = await this.catnipInstance.methods.setNyanAddress(this.nyanInstance._address).send({\n      from: this.accounts[0],\n      gas: 1000000\n     });\n   }\n\n   \n   \n\n   toggleStakingView = () => {\n    this.setState({\n      isViewingStaking: !this.state.isViewingStaking\n    });\n  };\n\n\n  togglePumpView = () => {\n    this.setState({\n      isViewingPump: !this.state.isViewingPump\n    })\n  }\n\n  _getWeb3 = () => {\n    return this.web3;\n  }\n\n  componentDidMount = async () => {\n    document.title = \"Nyan.finance\";\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n      \n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n      \n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n     \n      this.nyanInstance = new this.web3.eth.Contract(\n        NyanToken.abi,\n        \"0xc9ce70a381910d0a90b30d408cc9c7705ee882de\"\n      );\n     \n      this.catnipInstance = new this.web3.eth.Contract(\n        CatnipToken.abi,\n        \"0xd2b93f66fd68c5572bfb8ebf45e2bd7968b38113\",\n      );\n\n      setWeb3(this.web3);\n      \n      this.getNyanSupply();\n      this.getCatnipSupply();\n      this.totalNyanStaked();\n    \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({loaded: true}, this.getNyanBalance);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"Logo\">NYAN.FINANCE</div>    \n        <div className=\"stats-box\">\n        <div className=\"Nyan-bal\">You have {this.state.nyanBalance} NYAN </div>\n          <div className=\"stats-op\">Total Nyan Supply: {this.state.totalNyanSupply}</div>\n          <div className=\"stats-op\">Total Nyan Staked: {this.state.totalNyanStaked}</div>\n          <div className=\"stats-op\">Total Catnip Supply: {this.state.totalCatnipSupply}</div>\n        </div>\n        <div styles={{backgroundImage: `url(${nyanGif})`}} className=\"Nyan-cat\"></div>\n        <div className=\"Options-box\">\n          <div className=\"Option stake\" onClick={this.toggleStakingView}>\n            <h3>STAKE</h3>\n          </div>\n          <div className=\"Option pumped\" onClick={this.togglePumpView}>\n          <h3>PUMP</h3>\n          </div>\n        </div>\n\n\n        {this.state.isViewingStaking ? <Staking toggle={this.toggleStakingView} /> : null}\n        {this.state.isViewingPump ? <Pump toggle={this.togglePumpView} /> : null}\n\n        <div className=\"address ny\">NYAN address: <div className=\"addr-pink\">0xc9ce70a381910d0a90b30d408cc9c7705ee882de</div></div>\n        <div className=\"address ct\">CATNIP address: <div className=\"addr-pink\">0xd2b93f66fd68c5572bfb8ebf45e2bd7968b38113</div> </div>\n        <div className=\"social-box\">\n        <a target=\"_blank\" href={\"https://github.com/geass-zero/nyan.finance\"}>\n            <div className=\"social-icon git\"></div>\n          </a>\n          <a target=\"_blank\" href={\"https://www.twitter.com/nyanfinance\"}>\n            <div className=\"social-icon twit\"></div>\n          </a> \n          <a target=\"_blank\" href={\"https://t.me/nyanfinance\"}>\n            <div className=\"social-icon tele\"></div>\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}